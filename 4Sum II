class Solution {
    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {
        int n = A.length;
        int[] first = new int[n * n];
        int[] second = new int[n * n];
        
        int index = 0;
        HashMap<Integer, Integer> hmap = new HashMap<Integer, Integer>();
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                first[index] = A[i] + B[j];
                int key = C[i] + D[j];
                second[index] = key;
                index++;
                if (!hmap.containsKey(key)) {
                    hmap.put(key, 1);
                } else {
                    hmap.put(key, hmap.get(key) + 1);
                }
            }
        }
         
        Arrays.sort(second);
        
        int count = 0;
        for (int j = 0; j < n * n; j++) {
            int pos = Arrays.binarySearch(second, -first[j]);
            if (pos >= 0) {
                count = count + hmap.get(-first[j]);
            }
        }
        
        return count;
    }
    
}